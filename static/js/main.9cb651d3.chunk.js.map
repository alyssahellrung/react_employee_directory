{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/EmployeeTable.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["header","backgroundColor","color","fontFamily","textAlign","paddingTop","paddingBottom","borderBottom","Header","style","inputStyle","padding","width","border","marginTop","marginRight","marginLeft","fontSize","SearchBar","props","className","onChange","handleInputChange","value","name","type","placeholder","id","btnStyle","textDecoration","display","EmployeeTable","scope","onClick","handleSort","results","map","employee","newDob","Moment","dob","date","format","key","phone","alt","src","picture","thumbnail","first","last","email","Container","state","event","target","setState","sortedResults","sort","a","b","console","log","axios","get","then","res","data","this","search","handleFormSubmit","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0RAWE,IAAMA,EAAS,CACbC,gBAAiB,UACjBC,MAAO,UACPC,WAAY,+BACZC,UAAW,SACXC,WAAY,OACZC,cAAe,OACfC,aAAc,iBAKHC,EArBf,WACE,OACE,4BAAQC,MAAOT,GACb,kDACA,oHCgBN,IAAMU,EAAa,CACjBC,QAAS,MACTC,MAAO,MACPC,OAAQ,iBACRC,UAAW,OACXC,YAAa,OACbC,WAAY,OACZC,SAAU,QAIGC,EA/Bf,SAAmBC,GAEjB,OACE,8BACE,yBAAKC,UAAU,cACb,2BACEX,MAAOC,EACPW,SAAUF,EAAMG,kBAChBC,MAAOJ,EAAMI,MACbC,KAAK,WACLC,KAAK,OACLL,UAAU,eACVM,YAAY,SACZC,GAAG,c,iBCqBb,IAAMC,EAAW,CACb3B,gBAAiB,SACjBY,OAAQ,OACRX,MAAO,QACPS,QAAS,UACTP,UAAW,SACXyB,eAAgB,OAChBC,QAAS,eACTb,SAAU,MACVD,WAAY,OAGDe,EA7Cf,SAAuBZ,GAErB,OACE,2BAAOC,UAAU,uBACf,+BACE,4BACE,wBAAIY,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,OACE,4BAAQvB,MAAOmB,EAAUK,QAAS,kBAAMd,EAAMe,eAA9C,UACF,wBAAIF,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACGb,EAAMgB,QAAQC,KAAI,SAAAC,GACjB,IAAMC,EAASC,IAAOF,EAASG,IAAIC,MAAMC,OAAO,MAChD,OACE,wBAAIC,IAAKN,EAASO,OAChB,4BAAI,yBAAKC,IAAI,WAAWC,IAAKT,EAASU,QAAQC,aAC9C,4BAAKX,EAASb,KAAKyB,MAAQ,IAAMZ,EAASb,KAAK0B,MAC/C,4BAAKb,EAASO,OACd,4BAAKP,EAASc,OACd,4BAAKb,U,iBC0BJc,E,4MA7CbC,MAAQ,CACNlB,QAAS,I,EAYXb,kBAAoB,SAAAgC,GAClB,IAAM9B,EAAO8B,EAAMC,OAAO/B,KACpBD,EAAQ+B,EAAMC,OAAOhC,MAC3B,EAAKiC,SAAL,eACGhC,EAAOD,K,EAIZW,WAAa,SAAAoB,GACX,IAAMG,EAAgB,EAAKJ,MAAMlB,QAAQuB,MAAK,SAACC,EAAGC,GAChD,OAAOD,EAAIC,KAGbC,QAAQC,IAAIL,I,kEAtBO,IAAD,OAClBM,IAAMC,IAAI,gDACTC,MAAK,SAAAC,GAAG,OAAI,EAAKV,SAAS,CAAErB,QAAS+B,EAAIC,KAAKhC,e,2CAI/C0B,QAAQC,IAAIM,KAAKf,MAAMlB,W,+BAoBvB,OACE,6BACE,kBAAC,EAAD,MACE,kBAAC,EAAD,CACEkC,OAAQD,KAAKf,MAAMgB,OACnB/C,kBAAmB8C,KAAK9C,kBACxBgD,iBAAkBF,KAAKE,mBACzB,kBAAC,EAAD,CACEnC,QAASiC,KAAKf,MAAMlB,QACpBD,WAAYkC,KAAKlC,kB,GAxCLqC,aCCTC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.9cb651d3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return(\r\n    <header style={header}>\r\n      <h1>Employee Directory</h1>\r\n      <p>Click on carrots to filter by heading or use the search box to narrow your results.</p>\r\n    </header>\r\n  )\r\n}\r\n\r\n  const header = {\r\n    backgroundColor: \"#02075D\",\r\n    color: \"#FFFFFF\",\r\n    fontFamily: \"Arial, Helvetica, sans-serif\",\r\n    textAlign: \"center\",\r\n    paddingTop: \"20px\",\r\n    paddingBottom: \"10px\",\r\n    borderBottom: \"3px solid red\"\r\n  }\r\n\r\n\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction SearchBar(props) { \r\n\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <input\r\n          style={inputStyle}\r\n          onChange={props.handleInputChange}\r\n          value={props.value}\r\n          name=\"lastname\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search\"\r\n          id=\"search\"\r\n        />\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst inputStyle = {\r\n  padding: \"6px\",\r\n  width: \"20%\",\r\n  border: \"1px solid grey\",\r\n  marginTop: \"20px\",\r\n  marginRight: \"auto\",\r\n  marginLeft: \"auto\",\r\n  fontSize: \"17px\"\r\n}\r\n\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport Moment from \"moment\";\r\n\r\nfunction EmployeeTable(props) {\r\n \r\n  return (\r\n    <table className=\"table table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">Image</th>\r\n          <th scope=\"col\">Name\r\n            <button style={btnStyle} onClick={() => props.handleSort()}> Sort</button></th>\r\n          <th scope=\"col\">Phone</th>\r\n          <th scope=\"col\">Email</th>\r\n          <th scope=\"col\">DOB</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.results.map(employee => {\r\n          const newDob = Moment(employee.dob.date).format(\"LL\");\r\n          return (\r\n            <tr key={employee.phone}>\r\n              <td><img alt=\"employee\" src={employee.picture.thumbnail}/></td>\r\n              <td>{employee.name.first + \" \" + employee.name.last}</td>\r\n              <td>{employee.phone}</td>\r\n              <td>{employee.email}</td>\r\n              <td>{newDob}</td> \r\n            </tr>\r\n          )\r\n        })}\r\n        \r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nconst btnStyle = {\r\n    backgroundColor: \"orange\",\r\n    border: \"none\",\r\n    color: \"white\",\r\n    padding: \"2px 3px\",\r\n    textAlign: \"center\",\r\n    textDecoration: \"none\",\r\n    display: \"inline-block\",\r\n    fontSize: \"8px\",\r\n    marginLeft: \"2px\"\r\n}\r\n\r\nexport default EmployeeTable;","import React, { Component } from \"react\";\r\nimport Header from \"./Header\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport EmployeeTable from \"./EmployeeTable\";\r\nimport axios from \"axios\";\r\n\r\nclass Container extends Component {\r\n  state = {\r\n    results: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios.get(\"https://randomuser.me/api/?results=200&nat=u\")\r\n    .then(res => this.setState({ results: res.data.results }));\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(this.state.results)\r\n  }\r\n\r\n  handleInputChange = event => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  handleSort = event => {\r\n    const sortedResults = this.state.results.sort((a, b) => {\r\n      return a > b;\r\n    });\r\n\r\n    console.log(sortedResults);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n          <SearchBar \r\n            search={this.state.search} \r\n            handleInputChange={this.handleInputChange}\r\n            handleFormSubmit={this.handleFormSubmit}/>\r\n          <EmployeeTable \r\n            results={this.state.results}\r\n            handleSort={this.handleSort} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;","import React from \"react\";\nimport Container from \"./components/Container\";\n\nfunction App() {\n  return <Container />;\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}